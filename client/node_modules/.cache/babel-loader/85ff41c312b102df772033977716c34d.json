{"ast":null,"code":"import _classCallCheck from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/src/Containers/TextForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addProject as _addProject } from '../Actions/index.js';\nimport { toneAnalyzer } from '../tone.js';\n\nvar TextForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TextForm, _Component);\n\n  function TextForm() {\n    var _this;\n\n    _classCallCheck(this, TextForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextForm).call(this));\n\n    _this.handleOnSubmit = function (event) {\n      var project = _this.state;\n      event.preventDefault();\n      var _this$props = _this.props,\n          addProject = _this$props.addProject,\n          history = _this$props.history;\n\n      _this.toneAnalyzer(project);\n    };\n\n    _this.handleOnChange = function (event) {\n      _this.setState({\n        text: event.target.value\n      });\n    };\n\n    _this.state = {\n      text: '',\n      result: ''\n    };\n    return _this;\n  }\n\n  _createClass(TextForm, [{\n    key: \"updateProject\",\n    value: function updateProject(result) {\n      this.setState({\n        result: result\n      });\n    }\n  }, {\n    key: \"toneAnalyzer\",\n    value: function toneAnalyzer(project) {\n      var self = this;\n      var toneUsername = \"5be14bed-d818-4bd1-b4ca-e8b09dcc73b8\";\n      var tonePassword = \"THTqBjmyU6k4\";\n      var toneUrl = \"https://gateway.watsonplatform.net/tone-analyzer/api/v3/tone?version=2017-09-21\";\n      var data = {};\n      data.text = project.text;\n\n      var request = require(\"request\");\n\n      request.post({\n        url: toneUrl,\n        json: data,\n        auth: {\n          user: toneUsername,\n          pass: tonePassword\n        }\n      }, function (err, res, body) {\n        self.setState({\n          result: body\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        style: {\n          marginTop: '16px'\n        },\n        onSubmit: this.handleOnSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        name: \"text\",\n        cols: \"40\",\n        rows: \"5\",\n        onChange: this.handleOnChange,\n        placeholder: \"Paste text here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TextForm;\n}(Component);\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addProject: function addProject(project) {\n      return dispatch(_addProject(project));\n    }\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(TextForm);","map":{"version":3,"sources":["/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/src/Containers/TextForm.js"],"names":["React","Component","connect","addProject","toneAnalyzer","TextForm","handleOnSubmit","event","project","state","preventDefault","props","history","handleOnChange","setState","text","target","value","result","self","toneUsername","tonePassword","toneUrl","data","request","require","post","url","json","auth","user","pass","err","res","body","marginTop","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAU,IAAVA,WAAT,QAA2B,qBAA3B;AACA,SAASC,YAAT,QAA6B,YAA7B;;IAEMC,Q;;;;;AAEJ,sBAAc;AAAA;;AAAA;;AACZ;;AADY,UAqCdC,cArCc,GAqCG,UAAAC,KAAK,EAAI;AACxB,UAAIC,OAAO,GAAG,MAAKC,KAAnB;AACAF,MAAAA,KAAK,CAACG,cAAN;AAFwB,wBAGQ,MAAKC,KAHb;AAAA,UAGhBR,UAHgB,eAGhBA,UAHgB;AAAA,UAGJS,OAHI,eAGJA,OAHI;;AAIxB,YAAKR,YAAL,CAAkBI,OAAlB;AACD,KA1Ca;;AAAA,UA4CdK,cA5Cc,GA4CG,UAAAN,KAAK,EAAI;AACxB,YAAKO,QAAL,CAAc;AACZC,QAAAA,IAAI,EAAER,KAAK,CAACS,MAAN,CAAaC;AADP,OAAd;AAGD,KAhDa;;AAGZ,UAAKR,KAAL,GAAa;AACXM,MAAAA,IAAI,EAAE,EADK;AAEXG,MAAAA,MAAM,EAAE;AAFG,KAAb;AAHY;AAOb;;;;kCAEaA,M,EAAQ;AACpB,WAAKJ,QAAL,CAAc;AAACI,QAAAA,MAAM,EAAEA;AAAT,OAAd;AACD;;;iCAGYV,O,EAAS;AACpB,UAAIW,IAAI,GAAG,IAAX;AACA,UAAIC,YAAY,GAAE,sCAAlB;AACA,UAAIC,YAAY,GAAE,cAAlB;AACA,UAAIC,OAAO,GAAG,iFAAd;AACA,UAAIC,IAAI,GAAG,EAAX;AACAA,MAAAA,IAAI,CAACR,IAAL,GAAYP,OAAO,CAACO,IAApB;;AACA,UAAIS,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEAD,MAAAA,OAAO,CAACE,IAAR,CACE;AACEC,QAAAA,GAAG,EAAEL,OADP;AAEEM,QAAAA,IAAI,EAAEL,IAFR;AAGEM,QAAAA,IAAI,EAAE;AACFC,UAAAA,IAAI,EAAEV,YADJ;AAEFW,UAAAA,IAAI,EAAEV;AAFJ;AAHR,OADF,EAQK,UAASW,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyB;AACtBf,QAAAA,IAAI,CAACL,QAAL,CAAc;AAACI,UAAAA,MAAM,EAAEgB;AAAT,SAAd;AACH,OAVL;AAYC;;;6BAeK;AACN,aACE;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAb;AAAoC,QAAA,QAAQ,EAAE,KAAK7B,cAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAU,QAAA,IAAI,EAAC,MAAf;AAAsB,QAAA,IAAI,EAAC,IAA3B;AAAgC,QAAA,IAAI,EAAC,GAArC;AACE,QAAA,QAAQ,EAAE,KAAKO,cADjB;AAEE,QAAA,WAAW,EAAC,iBAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAKE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADF;AASD;;;;EA9DoBZ,S;;AAiEvB,IAAMmC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ,EAAI;AACrC,SAAO;AACLlC,IAAAA,UAAU,EAAE,oBAACK,OAAD;AAAA,aAAa6B,QAAQ,CAAClC,WAAU,CAACK,OAAD,CAAX,CAArB;AAAA;AADP,GAAP;AAGD,CAJD;;AAOA,eAAeN,OAAO,CAAC,IAAD,EAAOkC,kBAAP,CAAP,CAAkC/B,QAAlC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addProject } from '../Actions/index.js';\nimport { toneAnalyzer } from '../tone.js';\n\nclass TextForm extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      text: '',\n      result: ''\n    };\n  }\n\n  updateProject(result) {\n    this.setState({result: result});\n  }\n\n\n  toneAnalyzer(project) {\n    let self = this;\n    let toneUsername= \"5be14bed-d818-4bd1-b4ca-e8b09dcc73b8\";\n    let tonePassword= \"THTqBjmyU6k4\";\n    let toneUrl = \"https://gateway.watsonplatform.net/tone-analyzer/api/v3/tone?version=2017-09-21\";\n    let data = {};\n    data.text = project.text\n    let request = require(\"request\");\n\n    request.post(\n      {\n        url: toneUrl,\n        json: data,\n        auth: {\n            user: toneUsername,\n            pass: tonePassword\n        }\n      }, function(err, res, body) {\n            self.setState({result: body});\n        }\n      )\n    }\n\n  handleOnSubmit = event => {\n    let project = this.state;\n    event.preventDefault();\n    const { addProject, history } = this.props;\n    this.toneAnalyzer(project)\n  }\n\n  handleOnChange = event => {\n    this.setState({\n      text: event.target.value\n    });\n  }\n\n  render(){\n    return (\n      <form style={{ marginTop: '16px' }} onSubmit={this.handleOnSubmit} >\n        <textarea name=\"text\" cols=\"40\" rows=\"5\"\n          onChange={this.handleOnChange}\n          placeholder=\"Paste text here\">\n        </textarea>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addProject: (project) => dispatch(addProject(project))\n  };\n};\n\n\nexport default connect(null, mapDispatchToProps)(TextForm)\n"]},"metadata":{},"sourceType":"module"}