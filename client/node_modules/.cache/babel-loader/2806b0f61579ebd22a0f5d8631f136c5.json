{"ast":null,"code":"import _classCallCheck from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck-react-app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck-react-app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck-react-app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck-react-app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck-react-app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck-react-app/client/src/Containers/ResultsContainer.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport Result from '../Components/Result.js';\nimport { connect } from 'react-redux';\nimport { fetchProjects as _fetchProjects } from '../Actions/index.js';\n\nvar ResultsContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResultsContainer, _Component);\n\n  function ResultsContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ResultsContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResultsContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.saveProject = function () {\n      var _this$props = _this.props,\n          history = _this$props.history,\n          project = _this$props.project;\n      var sentences = project.sentences.map(function (sentence) {\n        return {\n          \"text\": sentence.text,\n          \"id\": sentence.sentence_id,\n          \"tones\": sentence.tones\n        };\n      });\n      console.log(JSON.stringify(project));\n      fetch('/api/save', {\n        method: 'POST',\n        // or 'PUT'\n        body: JSON.stringify({\n          project: {\n            id: project.idx,\n            img: project.img,\n            title: project.title,\n            text: project.text,\n            sentences_attributes: sentences,\n            tones_attributes: project.tones\n          }\n        }),\n        // data can be `string` or {object}!\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        _this.props.project.id = data.project.id;\n      }).then(function (id) {\n        return history.push(\"/projects\");\n      }).catch(function (error) {\n        return console.error('Error:', error);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ResultsContainer, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Result, {\n        project: this.props.project,\n        saveProject: this.saveProject,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ResultsContainer;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state, ownProps) {\n  var project = state.projects.find(function (project) {\n    return project.idx === +ownProps.match.params.projectId;\n  });\n\n  if (project) {\n    return {\n      project: project\n    };\n  } else {\n    return {\n      project: {}\n    };\n  }\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchProjects: function fetchProjects() {\n      return dispatch(_fetchProjects());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultsContainer);","map":{"version":3,"sources":["/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck-react-app/client/src/Containers/ResultsContainer.js"],"names":["React","Component","Button","Result","connect","fetchProjects","ResultsContainer","saveProject","props","history","project","sentences","map","sentence","text","sentence_id","tones","console","log","JSON","stringify","fetch","method","body","id","idx","img","title","sentences_attributes","tones_attributes","headers","then","res","json","data","push","catch","error","mapStateToProps","state","ownProps","projects","find","match","params","projectId","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAkC,OAAlC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAa,IAAbA,cAAT,QAA8B,qBAA9B;;IAEMC,gB;;;;;;;;;;;;;;;;;;UACJC,W,GAAc,YAAM;AAAA,wBACW,MAAKC,KADhB;AAAA,UACVC,OADU,eACVA,OADU;AAAA,UACDC,OADC,eACDA,OADC;AAElB,UAAIC,SAAS,GAAGD,OAAO,CAACC,SAAR,CAAkBC,GAAlB,CACd,UAAAC,QAAQ;AAAA,eACN;AAAC,kBAAQA,QAAQ,CAACC,IAAlB;AACA,gBAAMD,QAAQ,CAACE,WADf;AAEA,mBAASF,QAAQ,CAACG;AAFlB,SADM;AAAA,OADM,CAAhB;AAOAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeV,OAAf,CAAZ;AACAW,MAAAA,KAAK,CAAC,WAAD,EAAc;AACjBC,QAAAA,MAAM,EAAE,MADS;AACD;AAChBC,QAAAA,IAAI,EAAEJ,IAAI,CAACC,SAAL,CAAe;AACnBV,UAAAA,OAAO,EAAE;AACPc,YAAAA,EAAE,EAAEd,OAAO,CAACe,GADL;AAEPC,YAAAA,GAAG,EAAEhB,OAAO,CAACgB,GAFN;AAGPC,YAAAA,KAAK,EAAEjB,OAAO,CAACiB,KAHR;AAIPb,YAAAA,IAAI,EAAEJ,OAAO,CAACI,IAJP;AAKPc,YAAAA,oBAAoB,EAAEjB,SALf;AAMPkB,YAAAA,gBAAgB,EAAEnB,OAAO,CAACM;AANnB;AADU,SAAf,CAFW;AAWb;AACJc,QAAAA,OAAO,EAAC;AACN,0BAAgB;AADV;AAZS,OAAd,CAAL,CAeGC,IAfH,CAeQ,UAACC,GAAD;AAAA,eAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,OAfR,EAe6BF,IAf7B,CAekC,UAACG,IAAD,EAAW;AAAC,cAAK1B,KAAL,CAAWE,OAAX,CAAmBc,EAAnB,GAAwBU,IAAI,CAACxB,OAAL,CAAac,EAArC;AAAwC,OAftF,EAewFO,IAfxF,CAe6F,UAACP,EAAD;AAAA,eAAQf,OAAO,CAAC0B,IAAR,CAAa,WAAb,CAAR;AAAA,OAf7F,EAegIC,KAfhI,CAesI,UAAAC,KAAK;AAAA,eAAIpB,OAAO,CAACoB,KAAR,CAAc,QAAd,EAAwBA,KAAxB,CAAJ;AAAA,OAf3I;AAgBD,K;;;;;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAK7B,KAAL,CAAWE,OAA5B;AAAqC,QAAA,WAAW,EAAE,KAAKH,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAOC;;;;EArC0BN,S;;AAwC/B,IAAMqC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAQC,QAAR,EAAqB;AAC3C,MAAM9B,OAAO,GAAG6B,KAAK,CAACE,QAAN,CAAeC,IAAf,CAAoB,UAAAhC,OAAO;AAAA,WAAIA,OAAO,CAACe,GAAR,KAAgB,CAACe,QAAQ,CAACG,KAAT,CAAeC,MAAf,CAAsBC,SAA3C;AAAA,GAA3B,CAAhB;;AACE,MAAInC,OAAJ,EAAa;AACX,WAAO;AAAEA,MAAAA,OAAO,EAAPA;AAAF,KAAP;AACD,GAFD,MAEO;AACL,WAAO;AAAEA,MAAAA,OAAO,EAAE;AAAX,KAAP;AACD;AACF,CAPH;;AASA,IAAMoC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACtC1C,IAAAA,aAAa,EAAE;AAAA,aAAM0C,QAAQ,CAAC1C,cAAa,EAAd,CAAd;AAAA;AADuB,GAAL;AAAA,CAAnC;;AAIA,eAAeD,OAAO,CAACkC,eAAD,EAAkBQ,kBAAlB,CAAP,CAA6CxC,gBAA7C,CAAf","sourcesContent":["import React, { Component }  from 'react';\nimport { Button } from 'reactstrap';\nimport Result from '../Components/Result.js';\nimport { connect } from 'react-redux';\nimport { fetchProjects } from '../Actions/index.js'\n\nclass ResultsContainer extends Component {\n  saveProject = () => {\n    const { history, project } = this.props;\n    let sentences = project.sentences.map(\n      sentence => (\n        {\"text\": sentence.text,\n        \"id\": sentence.sentence_id,\n        \"tones\": sentence.tones\n        }\n      ));\n    console.log(JSON.stringify(project))\n    fetch('/api/save', {\n      method: 'POST', // or 'PUT'\n      body: JSON.stringify({\n        project: {\n          id: project.idx,\n          img: project.img,\n          title: project.title,\n          text: project.text,\n          sentences_attributes: sentences,\n          tones_attributes: project.tones\n        }\n      }), // data can be `string` or {object}!\n      headers:{\n        'Content-Type': 'application/json'\n      }\n    }).then((res) => res.json()).then((data) =>  {this.props.project.id = data.project.id}).then((id) => history.push(\"/projects\")).catch(error => console.error('Error:', error));\n  }\n\n  render() {\n    return (\n      <div>\n        <Result project={this.props.project} saveProject={this.saveProject} />\n        <div className=\"text-center\">\n        </div>\n      </div>\n      )\n    }\n  }\n\nconst mapStateToProps = (state, ownProps) => {\n  const project = state.projects.find(project => project.idx === +ownProps.match.params.projectId)\n    if (project) {\n      return { project }\n    } else {\n      return { project: {} }\n    }\n  }\n\nconst mapDispatchToProps = dispatch => ({\n  fetchProjects: () => dispatch(fetchProjects())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultsContainer);\n"]},"metadata":{},"sourceType":"module"}