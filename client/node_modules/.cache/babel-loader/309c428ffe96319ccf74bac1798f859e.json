{"ast":null,"code":"export function toneAnalyzer(project) {\n  var toneUsername = \"5be14bed-d818-4bd1-b4ca-e8b09dcc73b8\";\n  var tonePassword = \"THTqBjmyU6k4\";\n  var toneUrl = \"https://gateway.watsonplatform.net/tone-analyzer/api/v3/tone?version=2017-09-21\";\n  var data = {};\n  data.text = project.text;\n\n  var request = require(\"request\");\n\n  return new Promise(function (resolve, reject) {\n    request.post({\n      url: toneUrl,\n      json: data,\n      auth: {\n        user: toneUsername,\n        pass: tonePassword\n      }\n    }, function (err, res, data) {\n      if (err) reject(err);\n      resolve(data);\n    });\n  } // closing Promise\n  ); // end of getResult\n}","map":{"version":3,"sources":["/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/src/tone.js"],"names":["toneAnalyzer","project","toneUsername","tonePassword","toneUrl","data","text","request","require","Promise","resolve","reject","post","url","json","auth","user","pass","err","res"],"mappings":"AAAA,OAAO,SAASA,YAAT,CAAsBC,OAAtB,EAA+B;AACpC,MAAIC,YAAY,GAAE,sCAAlB;AACA,MAAIC,YAAY,GAAE,cAAlB;AACA,MAAIC,OAAO,GAAG,iFAAd;AACA,MAAIC,IAAI,GAAG,EAAX;AACAA,EAAAA,IAAI,CAACC,IAAL,GAAYL,OAAO,CAACK,IAApB;;AACA,MAAIC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEA,SAAO,IAAIC,OAAJ,CACL,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpBJ,IAAAA,OAAO,CAACK,IAAR,CACE;AACEC,MAAAA,GAAG,EAAET,OADP;AAEEU,MAAAA,IAAI,EAAET,IAFR;AAGEU,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEd,YADF;AAEJe,QAAAA,IAAI,EAAEd;AAFF;AAHR,KADF,EAQK,UAASe,GAAT,EAAcC,GAAd,EAAmBd,IAAnB,EAAyB;AACvB,UAAIa,GAAJ,EAASP,MAAM,CAACO,GAAD,CAAN;AAETR,MAAAA,OAAO,CAACL,IAAD,CAAP;AACD,KAZN;AAaA,GAfI,CAgBH;AAhBG,GAAP,CARoC,CA0BpC;AACD","sourcesContent":["export function toneAnalyzer(project) {\n  let toneUsername= \"5be14bed-d818-4bd1-b4ca-e8b09dcc73b8\";\n  let tonePassword= \"THTqBjmyU6k4\";\n  let toneUrl = \"https://gateway.watsonplatform.net/tone-analyzer/api/v3/tone?version=2017-09-21\";\n  let data = {};\n  data.text = project.text\n  let request = require(\"request\");\n\n  return new Promise(\n    (resolve, reject) => {\n     request.post(\n       {\n         url: toneUrl,\n         json: data,\n         auth: {\n           user: toneUsername,\n           pass: tonePassword\n         }\n       }, function(err, res, data) {\n            if (err) reject(err);\n\n            resolve(data);\n          })\n    }\n      // closing Promise\n  );\n  // end of getResult\n}\n"]},"metadata":{},"sourceType":"module"}