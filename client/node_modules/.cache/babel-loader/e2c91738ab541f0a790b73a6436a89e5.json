{"ast":null,"code":"import _regeneratorRuntime from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/src/Containers/TextForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addProject as _addProject } from '../Actions/index.js';\nimport { toneAnalyzer } from '../tone.js';\n\nvar TextForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TextForm, _Component);\n\n  function TextForm() {\n    var _this;\n\n    _classCallCheck(this, TextForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextForm).call(this));\n\n    _this.getResult = function (project) {\n      var toneUsername = \"5be14bed-d818-4bd1-b4ca-e8b09dcc73b8\";\n      var tonePassword = \"THTqBjmyU6k4\";\n      var toneUrl = \"https://gateway.watsonplatform.net/tone-analyzer/api/v3/tone?version=2017-09-21\";\n      var data = {};\n      data.text = project.text;\n\n      var request = require(\"request\");\n\n      request.post({\n        url: toneUrl,\n        json: data,\n        auth: {\n          user: toneUsername,\n          pass: tonePassword\n        }\n      }, function (err, res, data) {\n        return data;\n      });\n    };\n\n    _this.handleOnSubmit = function (event) {\n      event.preventDefault();\n      var _this$props = _this.props,\n          addProject = _this$props.addProject,\n          history = _this$props.history;\n\n      _this.processText(_this.state, history).then(function (result) {\n        return _this.updateProject(result);\n      }).then(function (project) {\n        return addProject(project);\n      });\n    };\n\n    _this.handleOnChange = function (event) {\n      _this.setState({\n        text: event.target.value\n      });\n    };\n\n    _this.state = {\n      text: '',\n      result: ''\n    };\n    return _this;\n  }\n\n  _createClass(TextForm, [{\n    key: \"updateProject\",\n    value: function updateProject(result) {\n      this.setState({\n        result: result\n      });\n      return this.state;\n    }\n  }, {\n    key: \"processText\",\n    value: function () {\n      var _processText = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(project, history) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getResult(this.state);\n\n              case 2:\n                result = _context.sent;\n                console.log(result);\n                return _context.abrupt(\"return\", result);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function processText(_x, _x2) {\n        return _processText.apply(this, arguments);\n      };\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        style: {\n          marginTop: '16px'\n        },\n        onSubmit: this.handleOnSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        name: \"text\",\n        cols: \"40\",\n        rows: \"5\",\n        onChange: this.handleOnChange,\n        placeholder: \"Paste text here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TextForm;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    projects: state.projects\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    addProject: function addProject(project) {\n      return dispatch(_addProject(project));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TextForm);","map":{"version":3,"sources":["/Users/sebastiangertz/.atom/.learn-ide/home/scirocco21/doublecheck/src/Containers/TextForm.js"],"names":["React","Component","connect","addProject","toneAnalyzer","TextForm","getResult","project","toneUsername","tonePassword","toneUrl","data","text","request","require","post","url","json","auth","user","pass","err","res","handleOnSubmit","event","preventDefault","props","history","processText","state","then","result","updateProject","handleOnChange","setState","target","value","console","log","marginTop","mapStateToProps","projects","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addProject } from '../Actions/index.js';\nimport { toneAnalyzer } from '../tone.js';\n\nclass TextForm extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      text: '',\n      result: ''\n    };\n  }\n\n  updateProject(result) {\n    this.setState({result: result});\n    return this.state\n  }\n\n  getResult = (project) => {\n      let toneUsername= \"5be14bed-d818-4bd1-b4ca-e8b09dcc73b8\";\n      let tonePassword= \"THTqBjmyU6k4\";\n      let toneUrl = \"https://gateway.watsonplatform.net/tone-analyzer/api/v3/tone?version=2017-09-21\";\n      let data = {};\n      data.text = project.text\n      let request = require(\"request\");\n\n      request.post(\n           {\n             url: toneUrl,\n             json: data,\n             auth: {\n               user: toneUsername,\n               pass: tonePassword\n             }\n           }, function(err, res, data) {\n                return data\n              }\n        )\n    };\n\n    async processText(project, history) {\n      let result = await this.getResult(this.state)\n      console.log(result)\n      return result\n    }\n\n  handleOnSubmit = event => {\n    event.preventDefault();\n    const { addProject, history } = this.props;\n    this.processText(this.state, history).then(result => this.updateProject(result)).then(project => addProject(project))\n  }\n\n  handleOnChange = event => {\n    this.setState({\n      text: event.target.value\n    });\n  }\n\n  render(){\n    return (\n      <form style={{ marginTop: '16px' }} onSubmit={this.handleOnSubmit} >\n        <textarea name=\"text\" cols=\"40\" rows=\"5\"\n          onChange={this.handleOnChange}\n          placeholder=\"Paste text here\">\n        </textarea>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    projects: state.projects\n  };\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addProject: (project) => dispatch(addProject(project))\n  };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TextForm)\n"]},"metadata":{},"sourceType":"module"}